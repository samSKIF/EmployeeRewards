Hard‑coded admin credentials appear throughout the repository.
Key examples:

Client-side
Login component defaults to the admin demo credentials:

Direct login request uses the same username/password:

Demo credentials shown on the page:

Auth page pre-populates an admin account with the credentials:

useAuth hook sends a fixed login payload:

Stand‑alone HTML pages embed the admin username and password:

client/direct-login.html

client/src/login-direct.html

HR config checks for the demo admin email explicitly:

Top navigation shows an admin menu for a hard-coded email:

Server-side
Test microservice logs in with the credentials:

API route logic treats admin@demo.io as special:

Backup routes file contains similar logic and seeds an admin user with the same credentials:

Email checks during user creation/update

Seeded admin account data

Password verification code contains a special case for the demo password:

Migration script references the admin email:

Setup/test scripts
Tenant setup script assigns the admin email to a company and employees:

Several test utilities and sample data scripts embed other hard-coded admin credentials, such as SecurePassword123! in test scripts and company-specific admin accounts in create-saas-sample-data.js

Recommended remediation
Remove hard-coded credentials. Replace the inline email and password strings with values loaded from environment variables or configuration files (e.g., using a .env file and process.env).

Use placeholders for demo values. For demo mode, read credentials from a configurable source rather than committing them to source control.

Update scripts and tests to read credentials from environment variables or command-line arguments instead of inline literals.

Document required environment variables (like ADMIN_EMAIL, ADMIN_PASSWORD, etc.) in a README or .env.example so developers know how to provide them.

Taking these steps will prevent accidental exposure of credentials and make it easier to configure different environments securely.



